---
  CeilometerAlarms.create_alarm_and_get_history:
   -
     args:
       meter_name: "ram_util"
       threshold: 10.0
       type: "threshold"
       state: "ok"
       statistic: "avg"
       alarm_actions: ["http://25.0.0.2:8776/alarm"]
       ok_actions: ["http://25.0.0.2:8776/ok"]
       insufficient_data_actions: ["http://25.0.0.2:8776/notok"]
     runner:
       type: "constant"
       times: 10
       concurrency: 5
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerAlarms.create_alarm:
   -
     args:
       meter_name: "ram_util"
       threshold: 10.0
       type: "threshold"
       statistic: "avg"
       alarm_actions: ["http://25.0.0.2:8776/alarm"]
       ok_actions: ["http://25.0.0.2:8776/ok"]
       insufficient_data_actions: ["http://25.0.0.2:8776/notok"]
     runner:
       type: "constant"
       times: 10
       concurrency: 1
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerAlarms.create_and_delete_alarm:
   -
     args:
       meter_name: "ram_util"
       threshold: 10.0
       type: "threshold"
       statistic: "avg"
       alarm_actions: ["http://25.0.0.2:8776/alarm"]
       ok_actions: ["http://25.0.0.2:8776/ok"]
       insufficient_data_actions: ["http://25.0.0.2:8776/notok"]
     runner:
       type: "constant"
       times: 10
       concurrency: 1
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerAlarms.create_and_list_alarm:
   -
     args:
       meter_name: "ram_util"
       threshold: 10.0
       type: "threshold"
       statistic: "avg"
       alarm_actions: ["http://25.0.0.2:8776/alarm"]
       ok_actions: ["http://25.0.0.2:8776/ok"]
       insufficient_data_actions: ["http://25.0.0.2:8776/notok"]
     runner:
       type: "constant"
       times: 10
       concurrency: 1
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerQueries.create_and_query_alarm_history:
   -
     args:
       orderby: !!null
       limit: !!null
       meter_name: "ram_util"
       threshold: 10.0
       type: "threshold"
       statistic: "avg"
       alarm_actions: ["http://25.0.0.2:8776/alarm"]
       ok_actions: ["http://25.0.0.2:8776/ok"]
       insufficient_data_actions: ["http://25.0.0.2:8776/notok"]
     runner:
       type: "constant"
       times: 100
       concurrency: 10
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerQueries.create_and_query_alarms:
   -
     args:
       filter: {"and": [{"!=": {"state": "dummy_state"}},{"=": {"type": "threshold"}}]}
       orderby: !!null
       limit: 10
       meter_name: "ram_util"
       threshold: 10.0
       type: "threshold"
       statistic: "avg"
       alarm_actions: ["http://25.0.0.2:8776/alarm"]
       ok_actions: ["http://25.0.0.2:8776/ok"]
       insufficient_data_actions: ["http://25.0.0.2:8776/notok"]
     runner:
       type: "constant"
       times: 100
       concurrency: 10
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerAlarms.create_and_update_alarm:
   -
     args:
       meter_name: "ram_util"
       threshold: 10.0
       type: "threshold"
       statistic: "avg"
       alarm_actions: ["http://25.0.0.2:8776/alarm"]
       ok_actions: ["http://25.0.0.2:8776/ok"]
       insufficient_data_actions: ["http://25.0.0.2:8776/notok"]
     runner:
       type: "constant"
       times: 10
       concurrency: 1
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerAlarms.list_alarms:
   -
     runner:
       type: "constant"
       times: 10
       concurrency: 1
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerEvents.create_user_and_get_event:
    -
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      context:
        users:
          tenants: 2
          users_per_tenant: 2

  CeilometerEvents.create_user_and_list_events:
    -
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      context:
        users:
          tenants: 2
          users_per_tenant: 2

  CeilometerEvents.create_user_and_list_event_types:
    -
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      context:
        users:
          tenants: 2
          users_per_tenant: 2

  CeilometerStats.create_meter_and_get_stats:
   -
     args:
       user_id: "user-id"
       resource_id: "resource-id"
       counter_volume: 1.0
       counter_unit: ""
       counter_type: "cumulative"
     runner:
       type: "constant"
       times: 200
       concurrency: 5
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerMeters.list_meters:
   -
     runner:
       type: "constant"
       times: 10
       concurrency: 1
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerResource.get_tenant_resources:
   -
     runner:
       type: "constant"
       times: 10
       concurrency: 5
     context:
       users:
         tenants: 2
         users_per_tenant: 2
       ceilometer:
         counter_name: "cpu_util"
         counter_type: "gauge"
         counter_volume: 1.0
         counter_unit: "instance"

  CeilometerResource.list_resources:
   -
     runner:
       type: "constant"
       times: 10
       concurrency: 1
     context:
       users:
         tenants: 2
         users_per_tenant: 2


  CeilometerQueries.create_and_query_samples:
   -
     args:
       filter: {"=": {"counter_unit": "instance"}}
       orderby: !!null
       limit: 10
       counter_name: "cpu_util"
       counter_type: "gauge"
       counter_unit: "instance"
       counter_volume: 1.0
       resource_id: "resource_id"
     runner:
       type: "constant"
       times: 100
       concurrency: 10
     context:
       users:
         tenants: 2
         users_per_tenant: 2

  CeilometerSamples.list_samples:
   -
     runner:
       type: "constant"
       times: 10
       concurrency: 2
     context:
       users:
         tenants: 2
         users_per_tenant: 2
       ceilometer:
         counter_name: "cpu_util"
         counter_type: "gauge"
         counter_unit: "instance"
         counter_volume: 1.0
         resources_per_tenant: 3
         samples_per_resource: 3

  CeilometerTraits.create_user_and_list_trait_descriptions:
    -
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      context:
        users:
          tenants: 2
          users_per_tenant: 2

  CeilometerTraits.create_user_and_list_traits:
    -
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      context:
        users:
          tenants: 2
          users_per_tenant: 2
